#/*-----------------------------------------------------------------------------*
# *                                                                             *
# *       Copyright © 2010 STABILIT Informatik AG, Switzerland                  *
# *                                                                             *
# *  Licensed under the Apache License, Version 2.0 (the "License");            *
# *  you may not use this file except in compliance with the License.           *
# *  You may obtain a copy of the License at                                    *
# *                                                                             *
# *  http://www.apache.org/licenses/LICENSE-2.0                                 *
# *                                                                             *
# *  Unless required by applicable law or agreed to in writing, software        *
# *  distributed under the License is distributed on an "AS IS" BASIS,          *
# *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
# *  See the License for the specific language governing permissions and        *
# *  limitations under the License.                                             *
# *-----------------------------------------------------------------------------*/


#  Instructions for inclusion of other configurations.
#  =============================================================================  
# 	include=propertyFile 
#	allows inclusion of other or customer specific configuration.
# 	If the same property is defined twice, the first found property defines the value! 
# 	Subsequent property duplicate will NOT overwrite the value!
#	Exception of this rule:
# 		For list properties (values separated by comma) the subsequent values
#		will be appended!
# 	Properties which must not be overwritten must be placed before inlcude.
# 	Properties which may be overwritten must be placed after include.


#  Instructions for use of external parameters and java system properties.
#  =============================================================================								
#  External parameters can be passes on the command line like
#	    -Dparameter=c:/temp 
#  OS Environment variables can be passes on the command in the same way like
#	    -Dparameter=%OS_VARIABLE%
#	Within this file the parameter value can be used as ${sys:parameter}
#	E.g. log path defined as OS environment variable LOG_DIR can be passed
#	on the command line as -Dlogdir=%LOG_DIR% and then used in this file as:
# 		root.pidPath=${sys:logdir}
#
#	Java system properties can be used with the same syntax ${sys:property}
#	E.g. java system property file.separator can be used in this file as:
#		fs=${sys:file.separator}
#							  	
#	For list of available java system properties see:
#	http://download.oracle.com/javase/tutorial/essential/environment/sysprop.html 																		
# -------------------------------------------------------------------------------

# variables
# ---------
fs=${sys:file.separator}

# general parameters
# ------------------
# writePID (OPTIONAL, default=false) defines if a pid-file  should be written or not.
# pid-file is created at SC startup to signal a running SC. It contains the SC PID. The 
# file is deleted on exit. 
root.writePID=true


# pidPath (MANDATORY if writePID=true) defines directory where the pid file is written to.
# It can be relative or absolute path. Relative path begins with . or ..
root.pidPath=..${fs}logs${fs}sc


# dumpPath (MANDATORY) defines directory where the dump file is written to.
# It can be relative or absolute path. Relative path begins with . or ..
root.dumpPath=..${fs}logs${fs}sc


# commandValidationEnabled (OPTIONAL, default=true) defines if header attributes in
# incomming SCMP requests are validated or not. In stable environment validation can
# be turned off to increase SC performance.
root.commandValidationEnabled=true


# operationTimeoutMultiplier (OPTIONAL, default=0.8) defines factor applied to oti
# in SCMP request. This will cause oti expiration on SC before oti expiration on the
# requester.
root.operationTimeoutMultiplier=0.8


# echoIntervalMultiplier (OPTIONAL, default=1.2) defines factor applid to eci
#in SCMP request. This will ensure session timeout expiration on SC before session 
#timeout expiration on the requester
root.echoIntervalMultiplier=1.2


# connectionTimeoutMillis (OPTIONAL, default=5000) defines the maximum time SC will
# wait when it creates a new connection. SC creates connection to server, to another SC,
# to a web-server or to Tomcat.  
root.connectionTimeoutMillis=10000


# subscriptionTimeoutMillis (OPTIONAL, default=60000) defines the maximum time 
# between subsequent client requests for new publications. If this timeout expires, 
# client subscription is deleted. 
# This parameter is analogous to echoInterval in session services.
#root.subscriptionTimeoutMillis=60000


# keepAliveOTIMillis (OPTIONAL, default=2000) defines the maximum time
# for receiving response to keepalive message. If this timeout expires,
# the connection is closed.
#root.keepAliveOTIMillis=2000


# serverAbortOTIMillis (OPTIONAL, default=10000) defines the maximum time
# for receiving response to abort session message sent to the server.
# If this timeout expires, server registration is deleted.
#root.serverAbortOTIMillis=10000


# cache parameters
# ----------------
# enabled (OPTIONAL, default=true) enables or disables caching in SC
cache.enabled=true


# diskPath (MANDATORY if cache.enabled = true) defines location on disk where
# cache will write temporary files holding the data.
# It can be relative or absolute path. Relative path begins with . or ..
cache.diskPath=..${fs}cache


# maxElementsInMemory (OPTIONAL, default=10000, 0 = no limit) defines maximum 
# number of elements (messages or parts) in memory.
#cache.maxElementsInMemory=10000


# maxElementsOnDisk (OPTIONAL, default=1000000, 0 = no limit) defines maximum 
# number of elements (messages or parts) on disk.
#cache.maxElementsOnDisk=1000000


# expirationCheckIntervalSeconds (OPTIONAL, default=300) defines interval in seconds 
# SC will check cache for expired messages and clean them up. 
cache.expirationCheckIntervalSeconds=60


# web parameters
# --------------
# xslTransformationCache (OPTIONAL, default=false) enables or disables caching of
# xsl transformations done in web-gui. During development of the gui it is usefull
# to turn this on, other wise browser must be restarted all the time.
#web.xslTransformationCache.enabled=false


# pageHeaderPrefix (OPTIONAL, default="") allows to define text displyed
# in page header and title. This is usefull to distinguish SC instances running 
# at the same time 
#web.pageHeaderPrefix=P01


# scDownloadService (OPTIONAL, default="") allows to define service used for 
# downloading of files via SC mgmt GUI
web.scDownloadService=file-1

# scUploadService (OPTIONAL, default="") allows to define service used for 
# uloading of files via SC mgmt GUI
web.scUploadService=file-1

# include customer specific configuration
# ---------------------------------------
include = sc-specific.properties


# SC listeners
# ------------
# listeners (MANDATORY) defines symbolic names for listeners. Each listener must be
# configred later in this file. This is list property!
listeners=sc-http, sc-tcp, mgmt-http, http-proxy

# http listener for SCMP messaging
# port (MANDATORY) on which the listener listens
sc-http.port=7000

# interfaces (OPTIONAL) list of interfaces the listener should be included
# if missing, all interfaces will be included. This is list property!
#sc-http.interfaces=localhost

# connectionType (MANDATORY, allowed values = netty.http, netty.tcp, netty.web, netty-proxy.http)
# the connection type (protocoll) used by this listener
sc-http.connectionType=netty.http

# tcp listener for SCMP messaging
sc-tcp.port=9000
sc-tcp.connectionType=netty.tcp

# listener for SC Mgmt-Gui
mgmt-http.port=81
mgmt-http.connectionType=netty.web
# credentials for SC Mgmt-Gui
mgmt-http.username=admin
mgmt-http.password=admin

# listener for http proxy, traffic is redirected to one remote host
http-proxy.port=8080
http-proxy.connectionType=netty-proxy.http
http-proxy.remoteNode=apache


# remoteNodes (MANDATORY for cascading and file services or for http-proxy listener) 
# defines symbolic names for remote nodes. 
# Each host must be configred later in this file. This is list property!
remoteNodes=sc1,sc2,apache,fileServer

# remote SC connected via tcp (cascaded services)
# type (MANDATORY allowed values = cascadedSC, webServer, fileServer) defines
# the type of the remote host 
sc1.type=cascadedSC

# port (MANDATORY) defines where the remote node listens
sc1.port=7001

# host (MANDATORY) defines the adress of the remote host
sc1.host=localhost

# connectionType (MANDATORY) defines the connection type (see above)
sc1.connectionType=netty.http

# maxConnectionPoolSize (OPTIONAL, default = 100) defines number of connections to this host
sc1.maxConnectionPoolSize=20

# keepAliveIntervalSeconds (OPTIONAL, default = 60) defines interval for sending keepalive messages
sc1.keepAliveIntervalSeconds=10


# remote SC connected via http (cascaded services)
sc2.type=cascadedSC
sc2.host=localhost
sc2.port=9001
sc2.connectionType=netty.tcp
sc2.maxConnectionPoolSize=20
sc2.keepAliveIntervalSeconds=10

# Web-Server for http-proxy traffic
apache.type=webServer
apache.host=www.stabilit.ch
apache.port=80
apache.connectionType=netty.http
apache.keepAliveIntervalSeconds=0
apache.maxConnectionPoolSize=20

# Web-Server for file services
fileServer.type=fileServer
fileServer.host=localhost
fileServer.port=80
fileServer.connectionType=netty.http
fileServer.keepAliveIntervalSeconds=0
fileServer.maxConnectionPoolSize=20
# maxSessions (OPTIONAL, default = 10) defines maximal number of internal sessions used for this file service
fileServer.maxSessions=10

# serviceNames (MANDATORY) defines names of services. 
# Each service must be configred later in this file. This is list property!
serviceNames=session-1,session-2,publish-1,publish-2,file-1,sc1-session-1,sc2-session-2,sc1-publish-1,sc2-publish-2

# local services
# type (MANDATORY, allowed values = session, publish, file)
session-1.type=session

# enabled (OPTIONAL, default=enabled) enables or disables session creation
session-1.enabled=true

session-2.type=session
session-2.enabled=true

publish-1.type=publish
publish-1.enabled=true

publish-2.type=publish
publish-2.enabled=true

# file services
file-1.type=file
file-1.enabled=true
# remoteNode (MANDATORY) defines the remote host on which a Web-Server must be running
file-1.remoteNode=fileServer
# path (MANDATORY) defines the url path used for this service. 
# The path is added to the host address when the http request is constructed
file-1.path=sc/file-1/
# uploadScript (MANDATORY) name of the script residing on the web-server that handles file upload
file-1.uploadScript=scupload.php
# uploadScript (MANDATORY) name of the script residing on the web-server that handles file list
file-1.listScript=sclist.php

# cascaded services
sc1-session-1.type=session
sc1-session-1.enabled=true
# remoteNode (MANDATORY) defines the remote SC to which the service is cascaded
sc1-session-1.remoteNode=sc1

sc2-session-2.type=session
sc2-session-2.enabled=true
sc2-session-2.remoteNode=sc2

sc1-publish-1.type=publish
sc1-publish-1.enabled=true
sc1-publish-1.remoteNode=sc1
sc1-publish-1.noDataIntervalSeconds=10

sc2-publish-2.type=publish
sc2-publish-2.enabled=true
sc2-publish-2.remoteNode=sc2
sc2-publish-2.noDataIntervalSeconds=10